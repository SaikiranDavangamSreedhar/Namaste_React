node_modules contains all the code that is fetched from npm.

In a React (or any Node.js) project, package.json and package-lock.json serve different purposes, and they are both crucial for managing dependencies. Here's a brief explanation of the differences:

package.json:

Purpose: package.json is a metadata file for your project. It contains various information about your project, such as its name, version, description, main file, scripts, dependencies, and more.
Key Points:
It lists the high-level information about your project.
It includes dependencies, both direct and development, but without specifying the exact versions.
It provides scripts that can be executed using the npm or yarn command.
It is meant to be human-readable and editable.

package-lock.json:

Purpose: package-lock.json is automatically generated by npm when you install packages. It provides a more deterministic and reproducible way of describing the dependencies tree.
Key Points:
It includes an exact version of every installed package, along with its dependencies, ensuring that the same versions are installed across different environments.
It helps in avoiding the "version drift" problem where different installations of the same project may end up with slightly different dependency versions.
It is used by npm to produce a consistent and repeatable installation of dependencies.
It is not meant to be manually edited.

Transitive dependencies(parcel can have it own dependencies and the dependencies can have its own dependencies.)

- If you have package.json and package-lock.json we can generate node_modules from it.

- We have to put package.json and package-lock.json on to github as they keep track of exact version of dependencies that are being used in our project.

npx parcel index.html - Just like npm similarly we have npx. npx means executing a package.
- CDN links are not preferred way to bring react and reactDom into our project.Why?-
is a costly operation as we make network call to get react. So it is preferred to have react and reactDom in node_modules.In anoth  
